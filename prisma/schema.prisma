// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId String         @unique
  email   String         @unique
  entries JournalEntry[] // one 2 many , one user can have many journal entries
}

model JournalEntry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  content String @db.Text

  analysis Analysis? // one to one relationship 1 analysis will have one journal entry

  @@unique([userId, id]) // make userid like with compound unique by id , basically userID + id combination is allowed , this is usefull for querying and 1 to many
}

model Analysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) // by default use date now
  updatedAt DateTime @updatedAt // use the db update date 

  entryID String
  entry   JournalEntry @relation(fields: [entryID], references: [id]) // defining a relationship

  mood     String
  summary  String  @db.Text() // long text.
  color    String
  negative Boolean

  @@unique([entryID])
}
